name: Docker Build Service API Gateway

on:
  push:
    branches:
      - main
    paths:
      - 'functions/0002_api_gateway/main.py'
      - 'functions/0002_api_gateway/db_util.py'
      - 'functions/0002_api_gateway/docs_processing.py'
      - 'functions/0002_api_gateway/requirements.txt'
      - 'functions/0002_api_gateway/Dockerfile'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-api-gateway

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest release version
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            const latestRelease = await github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return latestRelease.data.tag_name;
          result-encoding: string

      - name: Increment build number
        id: increment_build
        run: |
          latest_version=${{ steps.get_latest_release.outputs.result }}
          if [[ "$latest_version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            build=${BASH_REMATCH[4]}
            new_build=$((build + 1))
            new_version="$major.$minor.$patch.$new_build"
          elif [[ "$latest_version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            new_version="$major.$minor.$patch.1"
          else
            new_version="0.1.0.1"
          fi
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
          labels: |
            org.opencontainers.image.source=${{ github.repository }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build-and-push
        with:
          context: functions/0002_api_gateway
          file: functions/0002_api_gateway/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.new_version }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: |
            type=registry
            name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: Cleanup untagged images
        run: |
          untagged_images=$(docker images --filter "dangling=true" -q)
          if [ -n "$untagged_images" ]; then
          docker rmi $untagged_images
          fi